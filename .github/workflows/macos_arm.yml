name: Build and Publish Native Libraries

on:
  workflow_dispatch:
# This workflow is triggered manually from the Actions tab.

jobs:
#  build-freebsd:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          repository: jerrinot/questdb
#      - name: Build in FreeBSD
#        uses: vmactions/freebsd-vm@v1
#        with:
#          usesh: true
#          prepare: |
#            pkg install -y curl cmake gcc git nasm openjdk17
#          run: |
#            export JAVA_HOME=/usr/local/openjdk17
#            cd core
#            cmake -B build/release -DCMAKE_BUILD_TYPE=Release
#            cmake --build build/release --config Release
#      - name: log git status
#        run: |
#          git status
#      - name: Save Binary to Cache
#        uses: actions/cache/save@v3
#        with:
#          path: |
#            core/src/main/resources/io/questdb/bin/freebsd/libquestdb.so
#          # cache key format: nativelibs-freebsd-<commit hash>
#          key: nativelibs-freebsd-${{ github.sha }}
#  build-macos:
#    strategy:
#      matrix:
#        os: [macos-13-xlarge, macos-latest]
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          repository: jerrinot/questdb
#      - name: Install tooling
#        run: |
#          brew install make cmake gcc nasm
#      - name: Go to the build directory
#        run: |
#          cd core
#          cmake -B build/release -DCMAKE_BUILD_TYPE=Release
#          cmake --build build/release --config Release
#          cd ..
#      - name: Save MacOS ARM Binary to Cache
#        if : ${{ matrix.os == 'macos-13-xlarge' }}
#        uses: actions/cache/save@v3
#        with:
#          path: |
#            core/src/main/resources/io/questdb/bin/armosx/libquestdb.dylib
#          key: nativelibs-armosx-${{ github.sha }}
#      - name: Save MacOS Intel Binary to Cache
#        if: ${{ matrix.os == 'macos-latest' }}
#        uses: actions/cache/save@v3
#        with:
#          path: |
#            core/src/main/resources/io/questdb/bin/osx/libquestdb.dylib
#          key: nativelibs-osx-${{ github.sha }}
  build-other:
    runs-on: ubuntu-latest
    variables:
      generator: "CodeBlocks - Unix Makefiles"
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jerrinot/questdb
      - name: Increase file count and install tooling
        run: |
          sudo sysctl -w fs.file-max=500000
          sudo apt-get update -y
          sudo apt-get install -y nasm g++-10-aarch64-linux-gnu gcc-10-aarch64-linux-gnu gcc-mingw-w64 g++-mingw-w64
      - name: Generate Makefiles for ${{ generator }}
        run: |
          cd core
          cmake -G "${{generator}}" -DCMAKE_BUILD_TYPE=Release -B cmake-build-release -S.
      - name: Build source-code Linux
        run: |
          cmake --build cmake-build-release --config Release
      - name: CMAKE Linux ARM
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=./src/main/c/toolchains/linux-arm64.cmake -DARM_TOOLCHAIN_PATH=/usr/bin/ -DCMAKE_EXECUTABLE_SUFFIX=-10 -DCMAKE_CROSSCOMPILING=True -DCMAKE_BUILD_TYPE=Release -B cmake-build-release-arm64
      - name: Build source-code $(Agent.OS) for ARM Linux
        run: |
          cmake --build cmake-build-release-arm64 --config Release
      - name: Download windows jni_md.h from JDK 11
        run: |
          curl https://raw.githubusercontent.com/AdoptOpenJDK/openjdk-jdk11/master/src/java.base/windows/native/include/jni_md.h > $JAVA_HOME/include/jni_md.h
      - name: CMake for Windows
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=./src/main/c/toolchains/windows-x86_64.cmake -DCMAKE_CROSSCOMPILING=True -DCMAKE_BUILD_TYPE=Release -B cmake-build-release-win64
      - name: Build source-code for Windows
        run: |
          cmake --build cmake-build-release-win64 --config Release
      - name: Check C++ runtime dependency
        run: |
          x86_64-w64-mingw32-objdump -p core/src/main/resources/io/questdb/bin/windows/libquestdb.dll | grep libstdc++
          if [ $? -eq 0 ]; then echo "Failure: C++ runtime dependency detected"; exit 1; fi
#  collect-and-commit:
#    needs: [build-freebsd, build-macos]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          repository: jerrinot/questdb
#      - name: Print file sizes before
#        run: |
#          find ./core/src/main/resources/io/questdb/bin/ -type f -exec ls -l {} \;
#      - name: Restore FreeBSD binary from Cache
#        uses: actions/cache/restore@v3
#        with:
#          path: |
#            core/src/main/resources/io/questdb/bin/freebsd/libquestdb.so
#          key: nativelibs-freebsd-${{ github.sha }}
#      - name: Restore MacOS ARM binary from Cache
#        uses: actions/cache/restore@v3
#        with:
#          path: |
#            core/src/main/resources/io/questdb/bin/armosx/libquestdb.dylib
#          key: nativelibs-armosx-${{ github.sha }}
#      - name: Restore MacOS Intel binary from Cache
#        uses: actions/cache/restore@v3
#        with:
#          path: |
#            core/src/main/resources/io/questdb/bin/osx/libquestdb.dylib
#          key: nativelibs-osx-${{ github.sha }}
#      - name: Check git status
#        run: |
#          git status
#      - name: Print file sizes after
#        run: |
#          find ./core/src/main/resources/io/questdb/bin/ -type f -exec ls -l {} \;
